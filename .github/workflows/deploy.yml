name: CI/CD Pipeline

on:
  push:
    branches: [ "main" ]

env:
  IMAGE_NAME: ${{ secrets.DOCKER_USERNAME }}/app-0011

jobs:
  build-deploy:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout Code
      uses: actions/checkout@v4

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'

    - name: Install Dependencies
      run: npm install

    - name: Generate Unique Tag
      id: tag
      run: echo "TAG=build-${GITHUB_RUN_NUMBER}" >> $GITHUB_ENV

    - name: Build Docker Image
      run: docker build -t $IMAGE_NAME:$TAG .

    - name: Login to DockerHub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Push Docker Image
      run: docker push $IMAGE_NAME:$TAG

    - name: Deploy to EC2 via SSH
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.EC2_HOST }}
        username: ${{ secrets.EC2_USER }}
        key: ${{ secrets.EC2_KEY }}
        port: 22
        script: |
          IMAGE_NAME="${{ env.IMAGE_NAME }}"
          TAG="${{ env.TAG }}"

          if [ -z "$IMAGE_NAME" ] || [ -z "$TAG" ]; then
            echo "ERROR: IMAGE_NAME or TAG is not set."
            exit 1
          fi

          echo "Starting deployment on EC2..."
          echo "Using image: $IMAGE_NAME:$TAG"

          # Check if container exists and remove if it does
          if sudo docker ps -a --format '{{.Names}}' | grep -Eq '^natasha0618$'; then
            echo "Stopping and removing existing container natasha0018..."
            sudo docker stop natasha0618 || true
            sudo docker rm natasha0618 || true
          fi

          # Check if port 1985 is in use and kill the process
          if sudo lsof -i :1985; then
            echo "Port 1985 is in use. Killing process using it..."
            sudo fuser -k 1985/tcp || true
          fi

          # Clean old images
          OLD_IMAGE=$(sudo docker images --format "{{.Repository}}:{{.Tag}}" | grep "$IMAGE_NAME" | grep -v "$TAG" || true)
          if [ -n "$OLD_IMAGE" ]; then
            echo "Removing old image(s):"
            echo "$OLD_IMAGE"
            echo "$OLD_IMAGE" | xargs -r sudo docker rmi -f || true
          fi

          # Pull and run latest image
          echo "Pulling new image..."
          sudo docker pull $IMAGE_NAME:$TAG

          echo "Running new container named natasha0018..."
          sudo docker run -d -p 1985:8080 --name natasha0618 $IMAGE_NAME:$TAG

          echo "âœ… Deployment complete."
